타입스크립트는 프로그래밍 언어 이면서 컴파일러,
타입스크립트파일(.ts)는 tsc(타입스크립트 컴파일러)를 통해 자바스크립트 파일(.js)로 컴파일된다.

npm install -g typescript

.ts 파일 생성

tsc(typescript compiler) [FileName].ts

[FileName].js 파일 생김 

node app.js 로 실행 가능

tsc --init tsconfig.json 파일을 생성해줌

tsc -w(watch) [FileName].ts -> 파일을 세이브 하면 자동으로 컴파일 해줌

npm init -> pakage.json 생성 의존성 관리

let, var 차이 -> 범위의 차이 let은 블럭내부, var은 전역
const -> 상수

타입 추론 -> 타입선언을 하지 않아도 tsc가 타입을 추론해줌
            ex) let value = 'value'; -> value = 2; 에러가 뜬다. tsc가 string으로 추론을 했는데 number으로 바꾸려 하기 때문

타입 선언 -> ts는 타입 명시가 가능
            ex) let value:string = 'value', let num:number = 1;

선택적 프로퍼티 -> 인터페이스에 선언된 변수명 뒤에 ? 를 붙히면  구현체가 변수의 값을 지정하지 않아도 된다.
                    ex) interface User {
                        Id: number;
                        name: stirng;
                        age?: number;
                    }
                    let user: User = {
                        id: 1,
                        name: 'username',
                        age: 24 <- 'age'가 없어도 에러가 나지않음 (?가 없을때는 'age'변수가 무조건 선언 되어야한다.)
                    }

readonly -> 인터페이스에 명시된 변수를 초기화 이후에 바꿀 수 없다. (읽기전용)

enum -> enum OS {
            window,
            macOS,
            linux
        } -> 숫자 값으로 반환함 (
                                window -> 0,
                                macOS -> 1,
                                linux -> 2
                            )

        - string 값으로 반환하는 법
            -> enum Name {
                window = 'window',
                macOS = 'macOS
                linux = 'linux'
            } -> 결과: (
                        window = window
                        macOS = macOS
                        linux = linux
                    )

리터럴 타입 -> enum을 간단한게 표현(인터페이스에서)
                ex) os: 'window' | 'macOS' | 'linux'